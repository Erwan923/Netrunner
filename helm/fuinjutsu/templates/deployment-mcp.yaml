{{- if .Values.mcp.enabled -}}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Release.Name }}-mcp
  labels:
    app.kubernetes.io/name: {{ include "fuinjutsu.name" . }}-mcp
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
    {{- include "fuinjutsu.labels" . | nindent 4 }}
spec:
  {{- if not .Values.mcp.autoscaling.enabled }}
  replicas: {{ .Values.mcp.replicaCount }}
  {{- end }}
  selector:
    matchLabels:
      app.kubernetes.io/name: {{ include "fuinjutsu.name" . }}-mcp
      app.kubernetes.io/instance: {{ .Release.Name }}
  template:
    metadata:
      labels:
        app.kubernetes.io/name: {{ include "fuinjutsu.name" . }}-mcp
        app.kubernetes.io/instance: {{ .Release.Name }}
    spec:
      serviceAccountName: {{ include "fuinjutsu.serviceAccountName" . }}
      securityContext:
        {{- toYaml .Values.mcp.securityContext | nindent 8 }}
      containers:
        - name: {{ .Chart.Name }}-mcp
          image: "{{ .Values.image.repository }}/mcp:{{ .Values.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          command: ["python", "mcp_app.py"]
          ports:
            - name: http
              containerPort: {{ .Values.mcp.service.port }}
              protocol: TCP
          env:
            - name: HOST
              value: "0.0.0.0"
            - name: PORT
              value: "{{ .Values.mcp.service.port }}"
            - name: CONFIG_PATH
              value: "/app/config/config.json"
            - name: DOCKER_ENV
              value: "true"
            {{- range $key, $value := .Values.apiKeys.keys }}
            - name: {{ $key }}
              valueFrom:
                secretKeyRef:
                  name: {{ include "fuinjutsu.apiKeysSecretName" $ }}
                  key: {{ $key }}
            {{- end }}
          livenessProbe:
            httpGet:
              path: /
              port: http
            initialDelaySeconds: {{ .Values.probes.liveness.initialDelaySeconds }}
            periodSeconds: {{ .Values.probes.liveness.periodSeconds }}
            timeoutSeconds: {{ .Values.probes.liveness.timeoutSeconds }}
            failureThreshold: {{ .Values.probes.liveness.failureThreshold }}
            successThreshold: {{ .Values.probes.liveness.successThreshold }}
          readinessProbe:
            httpGet:
              path: /
              port: http
            initialDelaySeconds: {{ .Values.probes.readiness.initialDelaySeconds }}
            periodSeconds: {{ .Values.probes.readiness.periodSeconds }}
            timeoutSeconds: {{ .Values.probes.readiness.timeoutSeconds }}
            failureThreshold: {{ .Values.probes.readiness.failureThreshold }}
            successThreshold: {{ .Values.probes.readiness.successThreshold }}
          startupProbe:
            httpGet:
              path: /
              port: http
            initialDelaySeconds: {{ .Values.probes.startup.initialDelaySeconds }}
            periodSeconds: {{ .Values.probes.startup.periodSeconds }}
            timeoutSeconds: {{ .Values.probes.startup.timeoutSeconds }}
            failureThreshold: {{ .Values.probes.startup.failureThreshold }}
            successThreshold: {{ .Values.probes.startup.successThreshold }}
          resources:
            {{- toYaml .Values.mcp.resources | nindent 12 }}
          volumeMounts:
            - name: config-volume
              mountPath: /app/config
            - name: data-volume
              mountPath: /app/data
      volumes:
        - name: config-volume
          persistentVolumeClaim:
            claimName: {{ .Release.Name }}-config
        - name: data-volume
          persistentVolumeClaim:
            claimName: {{ .Release.Name }}-data
{{- end }}